os.loadAPI("apis/serializer")
os.loadAPI("apis/net")
os.loadAPI("apis/amber/version")

-- TODO: Extract package ID, package, and package bundle concepts.
function formatPackageId(packageId)
	local result = packageId.name
	if packageId.version ~= nil then
		-- TODO: Revisit this - use a different character to separate name & version.
		result = result .. "-" .. packageId.version
	end
	return result
end

-- Package binding
PackageClient = {}
PackageClient.__index = PackageClient
PackageClient.new = function(configFiles, repoTypesPath, defaultConfig)
	local repoConfigs = {}
	for _, configFile in ipairs(configFiles) do
		local fileConfigs = serializer.readFromFile(configFile)
		for _, repoConfig in ipairs(fileConfigs) do
			table.insert(repoConfigs, repoConfig)
		end
	end
	if not next(repoConfigs) and defaultConfig then
		repoConfigs = defaultConfig
	end

	local repositories = {}
	local repoTypes = {}
	for _, repoConfig in pairs(repoConfigs) do
		local repoType = repoTypes[repoConfig.type]
		if not repoType then
			-- TODO: Better error handling.
			repoType = dofile(fs.combine(repoTypesPath, repoConfig.type))
			repoTypes[repoConfig.type] = repoType
		end
		table.insert(repositories, repoType.new(repoConfig))
	end

	return setmetatable({
		repoConfigs = repoConfigs,
		repositories = repositories
	}, PackageClient)
end
PackageClient.fromConfigurationPath = function(path, defaultConfig)
	path = path or ""
	local configSources = fs.combine(path, "apis/amber/sources")
	local configFiles = {fs.combine(path, ".repositories")}
	if fs.isDir(configSources) then
		for _, file in pairs(fs.list(configSources)) do
			table.insert(configFiles, fs.combine(configSources, file))
		end
	end
	return PackageClient.new(configFiles, fs.combine(path, "apis/amber/repositories"), defaultConfig)
end
local function createPackage(package)
	if not package.manifest then
		-- TODO: The latter is a legacy path for backwards compatibility.
		-- Remove it after all packages have been migrated to the new format.
		local paths = {".manifest", "manifest"}
		for _, path in ipairs(paths) do
			local contents = package.contents[path]
			if contents then
				package.manifest = textutils.unserialize(contents)
				package.contents[path] = nil
				break
			end
		end
		if not package.manifest then
			package.manifest = {}
		end
	end
	return package
end
PackageClient.bindPackage = function(self, packageId)
	for _, repo in pairs(self.repositories) do
		local result = repo:bindPackage(packageId)
		if result ~= nil then
			return createPackage(result)
		end
	end
end
local function isSatisfiedBy(specId, packageId)
	if specId.name ~= packageId.name then
		return false
	end
	if specId.version == nil then
		return true
	end
	return version.new(specId.version):compareTo(version.new(packageId.version)) == 0
end
local function bundleContains(msg, packageId)
	for _, package in pairs(msg) do
		if isSatisfiedBy(packageId, package.id) then
			return true
		end
	end
	return false
end
PackageClient.bundlePackage = function(self, msg, packageId, userInstalled)
	if bundleContains(msg, packageId) then
		return
	end
	local package = self:bindPackage(packageId)
	if package == nil then
		return {errorMessage = string.format("Unable to locate package %s", formatPackageId(packageId))}
	end
	package.userInstalled = userInstalled
	table.insert(msg, package)
	self:bundlePackages(msg, package.manifest.dependencies)
end
PackageClient.bundlePackages = function(self, msg, toPackage, userInstalled)
	if toPackage == nil then
		return
	end
	for _, packageId in pairs(toPackage) do
		self:bundlePackage(msg, packageId, userInstalled)
	end
end
PackageClient.getBundle = function(self, toPackage, userInstalled)
	local bundle = {}
	self:bundlePackages(bundle, toPackage, userInstalled)
	return bundle
end
PackageClient.getAvailablePackages = function(self)
	local packages = {}
	for _, repo in pairs(self.repositories) do
		for name, packageInfo in pairs(repo:getAvailablePackages()) do
			if packages[name] == nil then
				packages[name] = packageInfo
			end
		end
	end
	return packages
end
local function getFilesystemEntry(filesystem, path, create)
	if path == "" then
		return filesystem
	end
	local dir = getFilesystemEntry(filesystem, fs.getDir(path), create)
	if not dir then
		return
	end
	local file = fs.getName(path)
	local entry = dir[file]
	if create and not entry then
		entry = {}
		dir[file] = entry
	end
	return entry
end
local function writeToFilesystem(filesystem, path, contents)
	if type(contents) == "string" then
		local dir = fs.getDir(path)
		local file = fs.getName(path)
		getFilesystemEntry(filesystem, dir, true)[file] = contents
	else
		for name, data in pairs(contents) do
			writeToFilesystem(filesystem, fs.combine(path, name), data)
		end
	end
end
local function buildFilesystem(bundle)
	local filesystem = {}
	for _, package in pairs(bundle) do
		writeToFilesystem(filesystem, "", package.contents)
	end
	return filesystem
end
local function loadIntoFilesystem(filesystem, files)
	if files == nil then
		return true
	end
	for name, file in pairs(files) do
		if fs.exists(file) then
			if fs.isDir(file) then
				return false, string.format("File %s is a directory", file)
			else
				writeToFilesystem(filesystem, name, serializer.readFile(file))
			end
		else
			return false, string.format("File %s does not exist", file)
		end
	end
	return true
end
PackageClient.buildNuggetFor = function(self, packageId, additionalPackages, additionalFiles)
	local package = self:bindPackage(packageId)
	if package == nil then
		return nil, "Unable to locate package"
	end
	
	local bundle = {package}
	self:bundlePackages(bundle, package.manifest.dependencies)
	self:bundlePackages(bundle, additionalPackages)
	
	local filesystem = buildFilesystem(bundle)
	local ok, err = loadIntoFilesystem(filesystem, additionalFiles)
	if not ok then
		return nil, err
	end

	local entryPoint = package.manifest.entryPoint	
	if entryPoint == nil then
		local candidates = {}
		for _, bundlePackage in pairs(bundle) do
			if bundlePackage.manifest.entryPoint then
				table.insert(candidates, bundlePackage.manifest.entryPoint)
			end
		end
		if not next(candidates) then
			return nil, "No entry point specified"
		elseif #candidates > 1 then		
			return nil, "Multiple potential entry points found; specify one in the primary package manifest"
		else
			entryPoint = candidates[1]
		end
	end

	local program = getFilesystemEntry(filesystem, entryPoint)
	if program == nil then
		return nil, string.format("Unable to locate entry point %s", entryPoint)
	elseif type(program) == "table" then
		return nil, string.format("Entry point %s is a directory", entryPoint)
	end	

	-- Note that we can't override fs in the environment because certain functions like os.loadAPI
	-- create an empty environment, so we have to override it in the global namespace.
	return Nugget.new(entryPoint, "-- " .. formatPackageId(package.id) .. [[

local _nuggetFiles = ]] .. textutils.serialize(filesystem) .. [[

local _baseFolder = fs.getDir(shell.getRunningProgram())
local function _getFilesystemEntry(path)
	if path == "" then
		return _nuggetFiles
	end
	local dir = _getFilesystemEntry(fs.getDir(path))
	if type(dir) == "table" then
		return dir[fs.getName(path)]
	end
end
local function _getLocalFile(file)
	if _baseFolder == "" then
		return _getFilesystemEntry(file)
	elseif file:sub(1, _baseFolder:len() + 1) == _baseFolder .. "/" then
		return _getFilesystemEntry(file:sub(_baseFolder:len() + 2))
	end
end

local _fs = _G.fs
local virtualFs = {}
setmetatable(virtualFs, {__index = _fs})
function virtualFs.open(file, mode)
	local localFile = _getLocalFile(file)
	if type(localFile) == "string" and mode == "r" then
		return {
			readAll = function() return localFile end,
			close = function() end
		}
	end
	return _fs.open(file, mode)
end
function virtualFs.isDir(dir)
	local localDir = _getLocalFile(dir)
	if type(localDir) == "table" then
		return true
	end
	return _fs.isDir(dir)
end
function virtualFs.list(dir)
	local localDir = _getLocalFile(dir)
	if type(localDir) ~= "table" then
		return _fs.list(dir)
	end
	
	local results = {}
	for file in pairs(localDir) do
		table.insert(results, file)
	end
	if _fs.isDir(dir) then
		for _, name in pairs(_fs.list(dir)) do
			if not localDir[name] then
				table.insert(results, name)
			end
		end
	end
	return results
end

_G.fs = virtualFs

local args = {...}
local ok, err = pcall(function()
	local program = loadfile(fs.combine(_baseFolder, ]] .. textutils.serialize(entryPoint) .. [[), _ENV)
	program(table.unpack(args))
end)
if not ok then
	printError(err)
end

_G.fs = _fs]])
end

-- Nuggets
Nugget = {}
Nugget.__index = Nugget
Nugget.new = function(entryPoint, contents)
	return setmetatable({
		entryPoint = entryPoint,
		contents = contents
	}, Nugget)
end
Nugget.writeTo = function(self, path)
	local file = fs.open(fs.combine(path, self.entryPoint), "w")
	file.write(self.contents)
	file.close()
end
Nugget.run = function(self, env, ...)
	local f = load(self.contents, entryPoint, "t", env)
	return f(...)
end

-- Local package installation
PackageInstallation = {}
PackageInstallation.__index = PackageInstallation
PackageInstallation.new = function(client, path, onEdit, onProgress)
	return setmetatable({
		client = client,
		path = path or "",
		onEdit = onEdit,
		onProgress = onProgress or function() end
	}, PackageInstallation)
end
PackageInstallation.getPackageListPaths = function(self)
	-- TODO: The latter path is a legacy one that exists only for backwards compatibility.
	return {fs.combine(self.path, ".packages"), fs.combine(self.path, "packageList")}
end
PackageInstallation.getInstallationMetadata = function(self)
	for _, path in ipairs(self:getPackageListPaths()) do
		local contents = serializer.readFromFile(path)
		if next(contents) ~= nil then
			if contents.version == nil then
				-- Upgrade v0 package lists.
				local newContents = {version = 1, packages = {}}
				for k, v in pairs(contents) do
					newContents.packages[k] = {id = v}
				end
				return newContents
			end
			return contents
		end
	end
	return {version = 1, packages = {}}
end
PackageInstallation.writePackageFile = function(self, destination, onWrite)
	local writeTo = destination
	local editFile = false
	-- TODO: Write to the template file AND copy it to the destination path if it does not exist.
	-- That way we can detect changes to the file when a new version is installed.
	if destination:sub(-2) == ".t" then
		local baseName = destination:sub(1, #destination - 2)
		if not fs.exists(baseName) then
			writeTo = baseName
			editFile = true
			self.onProgress(string.format("  %s => %s", destination, writeTo))
		else
			self.onProgress(string.format("  %s", writeTo))
		end
	else
		self.onProgress(string.format("  %s", writeTo))
	end
	local file = fs.open(writeTo, "w")
	if not file then
		self.onProgress(string.format("  ERROR: Unable to open %s for writing; is the file a directory or read-only?", writeTo))
		return
	end
	file.write(contents)
	file.close()
	onWrite(writeTo)
	if editFile and self.onEdit then
		self.onProgress(string.format("  Editing: %s", writeTo))
		self.onEdit(writeTo)
	end
end
PackageInstallation.writePackageFiles = function(self, path, data, onWrite)
	if not fs.isDir(path) then
		fs.makeDir(path)
	end
	for file, contents in pairs(data) do
		local destination = fs.combine(path, file)
		if type(contents) == "table" then
			self:writePackageFiles(destination, contents, onWrite)
		else
			self:writePackageFile(destination, onWrite)
		end
	end
end
local function extractPackageMetadata(package, allFiles)
	local metadata = {}
	for k, v in pairs(package) do
		if k == "contents" then
			metadata[k] = allFiles
		else
			metadata[k] = v
		end
	end
	return metadata
end
PackageInstallation.writeInstalledPackages = function(self, installed)
	local paths = self:getPackageListPaths()
	serializer.writeToFile(paths[1], installed)
	-- Clean up legacy package lists.
	for i = 2, #paths do
		fs.delete(paths[i])
	end
end
local function removeFile(file)
	fs.delete(file)
	-- Remove the parent directory if empty.
	local directory = fs.getDir(file)
	if directory ~= "" and not next(fs.list(directory)) then
		removeFile(directory)
	end
end
PackageInstallation.installPackage = function(self, package)
	if package.errorMessage ~= nil then
		-- TODO: onError callback.
		self.onProgress(string.format("ERROR: %s", package.errorMessage))
		return
	end
	
	self.onProgress(string.format("Installing package %s...", formatPackageId(package.id)))
	local installed = self:getInstallationMetadata()
	local existing = installed.packages[package.id.name] or {}
	
	local filesWritten = {}
	self:writePackageFiles(self.path, package.contents, function(file)
		filesWritten[file] = {}
		for _, package in pairs(installed.packages) do
			if package ~= existing and package.contents then
				local existingFile = package.contents[file]
				if existingFile and not existingFile.replaced then
					existingFile.replaced = true
					self.onProgress(string.format("  WARN: Replaced %s in package %s", file, formatPackageId(package.id)))
				end
			end
		end
	end)
	if existing.contents then
		for existingFile in pairs(existing.contents) do
			if not existingFile.replaced and not filesWritten[existingFile] then
				self.onProgress(string.format("  Removing obsolete file: %s", existingFile))
				removeFile(existingFile)
			end
		end
	end
	
	local newMetadata
	if not package.manifest.installWithoutTracking then
		newMetadata = extractPackageMetadata(package, filesWritten)
		newMetadata.userInstalled = newMetadata.userInstalled or existing.userInstalled
	end
	installed.packages[package.id.name] = newMetadata
	self:writeInstalledPackages(installed)
end
PackageInstallation.installBundle = function(self, bundle)
	for _, package in pairs(bundle) do
		self:installPackage(package)
	end
end
PackageInstallation.installPackagesCore = function(self, packages, userInstalled)
	local bundle = self.client:getBundle(packages, userInstalled)
	self:installBundle(bundle)
end
PackageInstallation.installPackages = function(self, packages, userInstalled)
	if userInstalled == nil then
		userInstalled = true
	end
	self.onProgress(string.format("Installing %i packages...", #packages))
	self:installPackagesCore(packages, userInstalled)
end
local function packageIdListContains(packages, packageId)
	for _, id in pairs(packages) do
		-- We don't check the version since that's not relevant for upgrades.
		if id.name == packageId.name then
			return true
		end
	end
	return false
end
PackageInstallation.getInstalledPackage = function(self, packageId)
	local installed = self:getInstallationMetadata()
	for _, pkg in pairs(installed.packages) do
		if isSatisfiedBy(packageId, pkg.id) then
			return pkg
		end
	end
end
local function getPackageState(installed, packageId)
	local package = installed.packages[packageId.name]
	if package ~= nil and isSatisfiedBy(packageId, package.id) then
		return "installed"
	end
	return "available"
end
PackageInstallation.getPackage = function(self, packageId)
	local state
	local available = self.client:bindPackage(packageId)
	if available ~= nil then
		state = "available"
	end
	local installed = self:getInstalledPackage(packageId)
	if installed ~= nil then
		state = "installed"
	end
	return {id = packageId, installed = installed, available = available, state = state}
end
PackageInstallation.listPackages = function(self, pattern, state)
	-- TODO: Return something like {id, installed = {}, available = {}, state = ""}
	local installed = self:getInstallationMetadata()
	local list
	if state == "installed" then
		list = installed.packages
	else
		-- We only fetch all packages if we really need them.
		list = self.client:getAvailablePackages()
	end
	
	local results = {}
	for _, package in pairs(list) do
		local matches = true
		if pattern ~= nil and package.id.name:find(pattern) == nil then
			matches = false
		end
		local packageState = getPackageState(installed, package.id)
		if state ~= nil and packageState ~= state then
			matches = false
		end
		if matches then
			package.state = packageState
			table.insert(results, package)
		end
	end
	return results
end
PackageInstallation.updatePackages = function(self, packages)
	local installed = self:getInstallationMetadata()
	local toRequest = {}
	for _, pkg in pairs(installed.packages) do
		if packages == nil or packageIdListContains(packages, pkg.id) then
			table.insert(toRequest, {name = pkg.id.name})
		end
	end
	if next(toRequest) == nil then
		return
	end
	self.onProgress(string.format("Updating %i packages...", #toRequest))
	self:installPackagesCore(toRequest, false)
end
PackageInstallation.removePackage = function(self, package)
	self.onProgress(string.format("Removing package %s...", formatPackageId(package)))
	local installed = self:getInstallationMetadata()
	local existing = installed.packages[package.name]
	if existing == nil then
		local message = string.format("ERROR: Package %s not installed", formatPackageId(package))
		self.onProgress(message)
		return false, message
	end

	for existingFile in pairs(existing.contents) do
		self.onProgress(string.format("  Removing: %s", existingFile))
		removeFile(existingFile)
	end
	
	installed.packages[package.name] = nil
	self:writeInstalledPackages(installed)

	return true
end
PackageInstallation.removePackages = function(self, packages)
	self.onProgress(string.format("Removing %i packages...", #packages))
	for _, package in ipairs(packages) do
		self:removePackage(package)
	end
end