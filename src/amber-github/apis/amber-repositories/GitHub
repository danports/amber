local github = dofile("apis/github")

local GitHub = {}
GitHub.__index = GitHub
GitHub.new = function(data)
	local auth
	if data.auth then
		auth = github.Auth.new(data.auth.type, data.auth.user, data.auth.token)
	end
	local repo = github.repo(data.user, data.name, auth)
	return setmetatable({
		repo = repo,
		defaultVersion = data.defaultVersion,
		path = data.path or "src"
	}, GitHub)
end
GitHub.getDefaultTree = function(self)
	local version, tree
	if self.defaultVersion then
		tree = self.repo:tree(self.defaultVersion)
		version = string.format("%s-%s-%s", tree:getCommit().data.committer.date, self.defaultVersion, tree.sha:sub(1, 8))
	else
		local release = self.repo:latestRelease()
		version = release.tag
		tree = release:tree()
	end
	return version, tree
end
GitHub.bindPackageId = function(self, packageId)
	local version = packageId.version
	if version == nil then
		return self:getDefaultTree()
	end
	local release = self.repo:releaseByTag(version)
	return version, release:tree()
end
GitHub.bindPackage = function(self, packageId, encode)
	local version, tree = self:bindPackageId(packageId)
	local repoRoot = tree:getChild(self.path)
	if repoRoot == nil then
		return nil, string.format("Unable to locate repository root %s", self.path)
	end
	local packageTree = repoRoot:getChild(packageId.name)
	if packageTree == nil then
		return nil, string.format("Unable to find package %s in repository root %s", packageId.name, self.path)
	end
	
	local contents = {}
	packageTree:copyTo(contents, nil, encode)
	return {
		id = {name = packageId.name, version = version},
		contents = contents
	}
end
GitHub.getAvailablePackages = function(self)
	local version, tree = self:getDefaultTree()
	local repoRoot = tree:getChild(self.path)
	if repoRoot == nil then
		return {}
	end
	
	local packages = {}
	for _, file in ipairs(repoRoot.contents) do
		if getmetatable(file) == github.Tree then
			-- TODO: Read the manifest.
			packages[file.path] = {
				id = {name = file.path, version = version}
			}
		end
	end
	return packages
end

return GitHub