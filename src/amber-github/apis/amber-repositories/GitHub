local github = dofile("apis/github")

local GitHub = {}
GitHub.__index = GitHub
GitHub.new = function(data)
	local auth
	if data.auth then
		auth = github.Auth.new(data.auth.type, data.auth.user, data.auth.token)
	end
	local repo = github.repo(data.user, data.name, auth)
	return setmetatable({
		repo = repo,
		defaultVersion = data.defaultVersion,
		path = data.path or "src"
	}, GitHub)
end
GitHub.bindPackageId = function(self, packageId)
	local version = packageId.version
	local tree
	if version == nil then
		if self.defaultVersion then
			tree = self.repo:tree(self.defaultVersion)
			version = string.format("%s-%s-%s", tree:getCommit().data.committer.date, self.defaultVersion, tree.sha:sub(1, 7))
		else
			local release = self.repo:latestRelease()
			version = release.tag
			tree = release:tree()
		end
	else
		local release = self.repo:releaseByTag(version)
		tree = release:tree()
	end
	return version, tree
end
GitHub.bindPackage = function(self, packageId, encode)
	local version, tree = self:bindPackageId(packageId)
	local repoRoot = tree:getChild(self.path)
	if repoRoot == nil then
		return nil, string.format("Unable to locate repository root %s", self.path)
	end
	local packageTree = repoRoot:getChild(packageId.name)
	if packageTree == nil then
		return nil, string.format("Unable to find package %s in repository root %s", packageId.name, self.path)
	end
	
	local contents = {}
	packageTree:copyTo(contents, nil, encode)
	return {
		id = {name = packageId.name, version = version},
		contents = contents
	}
end

return GitHub