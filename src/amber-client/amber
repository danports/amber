-- If we're running off a disk, we want to load all of the APIs from the disk, not the computer,
-- to ensure that they are compatible with this code.
local restoreLoadAPI = false
if os.originalLoadAPI == nil then
	os.originalLoadAPI = os.loadAPI
	local dir = fs.getDir(shell.getRunningProgram())
	os.loadAPI = function(api)
		os.originalLoadAPI(fs.combine(dir, api))
	end
	restoreLoadAPI = true
end

os.loadAPI("apis/events")
os.loadAPI("apis/net")
os.loadAPI("apis/amber/amber")

-- Connect to a server by default.
-- Load the configuration from the program's location, but update the current folder.
local directory = shell.dir()
local client = amber.PackageClient.fromConfigurationPath(fs.getDir(shell.getRunningProgram()), {{type = "AmberServer"}})
local installation = amber.PackageInstallation.new(
	client,
	directory,
	-- Edit template files interactively.
	function(file) shell.run("edit", "/" .. file) end,
	function(progress) print(progress) end
)

local function createPackageIds(...)
	local ids = {}
	for _, name in ipairs({...}) do
		table.insert(ids, {name = name})
	end
	return ids
end
local function resolveNuggetItems(items)
	local packages = {}
	local files = {}
	for _, item in ipairs(items) do
		if item:sub(1, 5) == "file:" then
			local file = shell.resolve(item:sub(6))
			local name = file
			if directory ~= "" and file:sub(1, directory:len() + 1) == directory .. "/" then
				name = file:sub(directory:len() + 2)
			end
			files[name] = file
		elseif item:sub(1, 8) == "package:" then
			table.insert(packages, {name = item:sub(9)})
		else
			print(string.format("Unknown nugget item %s; ignoring it", item))
		end
	end
	return packages, files
end
-- TODO: Extract command logic into its own API.
local function getCommand(commands, path, op, ...)
	if op == nil then
		return
	end
	local command = commands[op]
	if command == nil then
		return
	elseif command.command == nil then
		return getCommand(command, path .. op .. " ", ...)
	else
		return command, path .. op, {...}
	end
end
local function listCommands(commands, path)
	for name, command in pairs(commands) do
		local fullPath = path .. name
		if command.command then
			print(fullPath)
		else
			listCommands(command, fullPath .. " ")
		end
	end
end
local function getCommandName(name)
	-- TODO: How will shell.getRunningProgram() work when running as a nugget?
	return string.format("%s %s", fs.getName(shell.getRunningProgram()), name)
end
local function printUsage(command, name)
	print("Usage:")
	print(string.format("%s %s", getCommandName(name), command.usage))
	print(string.format("  %s", command.description))
end
local function runCommand(commands, ...)
	local command, name, args = getCommand(commands, "", ...)
	if command == nil then
		printError("Unknown command")
		print("Available commands:")
		listCommands(commands, "")
		return
	end
	local result = command.command(table.unpack(args))
	if result == false then
		printUsage(command, name)
	end
end

local commands = {}
commands.help = {
	description = "Displays help for commands.",
	usage = "[<command>]",
	command = function(op, ...)
		if op == nil then
			print(string.format("Run '%s <command>' for usage instructions.", getCommandName("help")))
			print("Available commands:")
			listCommands(commands, "")
		else
			local command, name = getCommand(commands, "", op, ...)
			if command == nil then
				printError("Unknown command")
				return
			end
			printUsage(command, name)
		end
	end
}
commands.install = {
	description = "Installs or updates specified packages.",
	usage = "<package1> <package2>...",
	command = function(...)
		if select(1, ...) == nil then
			return false
		end
		installation:installPackages(createPackageIds(...))
	end
}
commands.update = {
	description = "Updates specified or all installed packages.",
	usage = "[<package1> <package2>...]",
	command = function(...)
		local toUpdate
		if select(1, ...) ~= nil then
			toUpdate = createPackageIds(...)
		end
		installation:updatePackages(toUpdate)
	end
}
commands.remove = {
	description = "Removes specified packages.",
	usage = "<package1> <package2>...",
	command = function(...)
		if select(1, ...) == nil then
			return false
		end
		installation:removePackages(createPackageIds(...))
	end
}
commands.show = {
	description = "Shows detailed information about a package.",
	usage = "<package>",
	command = function(packageName, more)
		if packageName == nil or more ~= nil then
			return false
		end
		local package = installation:getPackage({name = packageName})
		if not package.state then
			printError(string.format("Package %s not found", packageName))
			return
		end
		print(package.id.name)
		if package.available and package.available.manifest and package.available.manifest.description then
			print(package.available.manifest.description)
		end
		print(string.format("State: %s", package.state))
		if package.available then
			print(string.format("Available version: %s", package.available.id.version))
			local manifest = package.available.manifest
			if manifest and manifest.dependencies then
				print("Depends on:")
				for _, dependency in pairs(manifest.dependencies) do
					print(string.format("  %s", amber.formatPackageId(dependency)))
				end
			end
		end
		if package.installed then
			print(string.format("Installed version: %s", package.installed.id.version))
			if package.installed.contents and next(package.installed.contents) then
				print("Installed files:")
				for file in pairs(package.installed.contents) do
					local flags = ""
					if file.replaced then
						flags = " (replaced)"
					end
					print(string.format("  %s%s", file, flags))
				end
			end
		end
	end
}
commands.list = {
	description = "Lists packages, optionally filtering by name and state.",
	usage = "[name:<pattern>] [state:<installed|available>]",
	command = function(...)
		local pattern, state
		for _, arg in ipairs({...}) do
			if arg:sub(1, 5) == "name:" then
				if pattern == nil then
					pattern = arg:sub(6)
				else
					-- Multiple search patterns are not supported.
					return false
				end
			elseif arg:sub(1, 6) == "state:" then
				if state == nil then
					state = arg:sub(7)
				else
					return false
				end
			else
				return false
			end
		end
		local packages = installation:listPackages(pattern, state)
		local toPrint = {}
		for name, package in pairs(packages) do
			table.insert(toPrint, {package.id.name, package.id.version, package.state})
		end
		textutils.tabulate(table.unpack(toPrint))
	end
}
commands.nugget = {
	save = {
		description = "Save nugget to file with additional packages and files included.",
		usage = "<package> [package:<name>] [file:<path>]...",
		command = function(packageId, ...)
			if packageId == nil then
				return false
			end

			local additionalPackages, additionalFiles = resolveNuggetItems({...})
			local nugget, errorMessage = installation.client:buildNuggetFor({name = packageId}, additionalPackages, additionalFiles)
			if nugget == nil then
				printError(errorMessage)
				return
			end
			nugget:writeTo(shell.dir())
			print(string.format("%s nugget saved.", packageId))
		end
	},
	run = {
		description = "Runs nugget with provided arguments.",
		usage = "<package> [...]",
		command = function(packageId, ...)
			if packageId == nil then
				return false
			end
			local nugget, errorMessage = installation.client:buildNuggetFor({name = packageId})
			if nugget == nil then
				printError(errorMessage)
				return
			end
			nugget:run(_ENV, ...)
		end
	}
}
commands.repository = {
	add = {
		description = "Add a repository to the client's configuration.",
		usage = "<url>",
		command = function(url)
			if url == nil then
				return false
			end
			local repoConfig, configFile = installation.client:addRepository(url)
			if repoConfig then
				if configFile then
					print(string.format("Added %s repository to %s.", repoConfig.type, configFile))
				else
					printError(string.format("Unable to write configuration for new %s repository.", repoConfig.type))
				end
			else
				printError("Unable to identify repository type from URL provided.")
			end
		end
	}
}
commands.deploy = {
	description = "Tells an Amber server to broadcast a package update to the network.",
	usage = "<package> [<server>]",
	command = function(packageName, server, more)
		if not packageName or more then
			return false
		end
		server = server or "amber://"
		net.sendMessage(server, "deployUpdate", packageName)
		print(string.format("Sent command to %s to deploy %s.", server, packageName))
	end
}

-- TODO: Do we need this? We might be performing a local operation only.
-- Modify the net library to automatically open a modem when you make a network call.
net.openModem()
runCommand(commands, ...)
if restoreLoadAPI then
	os.loadAPI = os.originalLoadAPI
	os.originalLoadAPI = nil
end