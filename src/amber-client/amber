-- If we're running off a disk, we want to load all of the APIs from the disk, not the computer,
-- to ensure that they are compatible with this code.
if os.originalLoadAPI == nil then
	os.originalLoadAPI = os.loadAPI
	local dir = fs.getDir(shell.getRunningProgram())
	os.loadAPI = function(api)
		os.originalLoadAPI(fs.combine(dir, api))
	end
end

os.loadAPI("apis/events")
os.loadAPI("apis/net")
os.loadAPI("apis/amber")

-- Connect to an Amber server by default.
-- Load the configuration from the program's location, but update the current folder.
local directory = shell.dir()
local client = amber.PackageClient.fromConfigurationPath(fs.getDir(shell.getRunningProgram()), {{type = "AmberServer"}})
local installation = amber.PackageInstallation.new(
	directory,
	-- Edit template files interactively.
	function(file) shell.run("edit", "/" .. file) end,
	function(progress) print(progress) end
)

local function createPackageIds(names)
	local ids = {}
	for _, name in ipairs(names) do
		table.insert(ids, {name = name})
	end
	return ids
end
local function resolveNuggetItems(items)
	local packages = {}
	local files = {}
	for _, item in ipairs(items) do
		if item:sub(1, 5) == "file:" then
			local file = shell.resolve(item:sub(6))
			local name = file
			if directory ~= "" and file:sub(1, directory:len() + 1) == directory .. "/" then
				name = file:sub(directory:len() + 2)
			end
			files[name] = file
		elseif item:sub(1, 8) == "package:" then
			table.insert(packages, {name = item:sub(9)})
		else
			print(string.format("Unknown nugget item %s; ignoring it", item))
		end
	end
	return packages, files
end

local commands = {
	install = function(args)
		if next(args) == nil then
			return false
		end
		installation:installPackages(client, createPackageIds(args))
	end,
	update = function(args)
		local toUpdate
		if next(args) ~= nil then
			toUpdate = createPackageIds(args)
		end
		installation:updatePackages(client, toUpdate)
	end,
	remove = function(args)
		if next(args) == nil then
			return false
		end
		installation:removePackages(createPackageIds(args))
	end,
	list = function(args)
		local pattern, state
		for _, arg in ipairs(args) do
			if arg:sub(1, 5) == "name:" then
				if pattern == nil then
					pattern = arg:sub(6)
				else
					-- Multiple search patterns are not supported.
					return false
				end
			elseif arg:sub(1, 6) == "state:" then
				if state == nil then
					state = arg:sub(7)
				else
					return false
				end
			else
				return false
			end
		end
		local packages = installation:listPackages(client, pattern, state)
		local toPrint = {}
		for name, package in pairs(packages) do
			table.insert(toPrint, {package.id.name, package.id.version, package.state})
		end
		textutils.tabulate(toPrint)
	end,
	nugget = function(args)
		if #args < 2 then
			return false
		end
		local op = args[1]
		local opActions = {
			save = function(packageId, ...)
				local additionalPackages, additionalFiles = resolveNuggetItems({...})
				local nugget, errorMessage = client:buildNuggetFor({name = packageId}, additionalPackages, additionalFiles)
				if nugget == nil then
					printError(errorMessage)
					return
				end
				nugget:writeTo(shell.dir())
				print(string.format("%s nugget saved.", packageId))
			end,
			run = function(packageId, ...)
				local nugget, errorMessage = client:buildNuggetFor({name = packageId})
				if nugget == nil then
					printError(errorMessage)
					return
				end
				nugget:run(...)
			end
		}
		local opAction = opActions[op]
		if opAction == nil then
			return false
		end
		local packageId = args[2]
		opAction(packageId, select(3, table.unpack(args)))
	end
}

-- TODO: Do we need this? We might be performing a local operation only.
net.openModem()
local action = select(1, ...)
local args = {select(2, ...)}
if action == nil or commands[action] == nil or commands[action](args) == false then
	print("Usage:")
	print("amber install <package1> <package2>...")
	print("  Installs or updates specified packages.")
	print("amber update [<package1> <package2>...]")
	print("  Updates specified or all installed packages.")
	print("amber remove <package1> <package2>...")
	print("  Removes specified packages.")
	print("amber list [name:<pattern>] [state:<installed|available>]")
	print("  Lists packages, optionally filtering by name and state.")
	print("amber nugget save <package> [<package:name> <file:path>...]")
	print("  Save nugget to file with additional packages and files included.")
	print("amber nugget run <package> ...")
	print("  Runs nugget with provided arguments.")
end