-- If we're running off a disk, we want to load all of the APIs from the disk, not the computer,
-- to ensure that they are compatible with this code.
-- TODO: Side-by-side loading (we could just embed all dependencies into this file).
if os.originalLoadAPI == nil then
	os.originalLoadAPI = os.loadAPI
	local dir = fs.getDir(shell.getRunningProgram())
	os.loadAPI = function(api)
		os.originalLoadAPI(fs.combine(dir, api))
	end
end

os.loadAPI("apis/events")
os.loadAPI("apis/net")
os.loadAPI("apis/amber")

local path = shell.dir()
-- Connect to an Amber server by default.
local client = amber.PackageClient.fromConfigurationPath(path, {{type = "AmberServer"}})
local installation = amber.PackageInstallation.new(
	path,
	-- Edit template files interactively.
	function(file) shell.run("edit", "/" .. file) end,
	function(progress) print(progress) end
)

local function createPackageIds(names)
	local ids = {}
	for _, name in ipairs(names) do
		table.insert(ids, {name = name})
	end
	return ids
end

local commands = {
	install = function(args)
		if next(args) == nil then
			return false
		end
		installation:installPackages(client, createPackageIds(args))
	end,
	update = function(args)
		installation:updatePackages(client)
	end,
	remove = function(args)
		if next(args) == nil then
			return false
		end
		installation:removePackages(client, createPackageIds(args))
	end
}

-- TODO: Do we need this? We might be performing a local operation only.
net.openModem()
local action = select(1, ...)
local args = {select(2, ...)}
if action == nil or commands[action] == nil or commands[action](args) == false then
	print("Usage:")
	print("amber install <package1> <package2>...")
	print("   Installs or updates specified packages.")
	print("amber update")
	print("   Updates all installed packages.")
	print("amber remove <package1> <package2>...")
	print("   Removes specified packages.")
end