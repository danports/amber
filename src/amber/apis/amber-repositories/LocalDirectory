os.loadAPI("apis/version")

local LocalDirectory = {}
LocalDirectory.__index = LocalDirectory
LocalDirectory.new = function(data)
	return setmetatable({path = data.path or "/packages"}, LocalDirectory)
end
LocalDirectory.getPackageRootPath = function(self, packageId)
	return fs.combine(self.path, packageId.name)
end
LocalDirectory.getPackagePath = function(self, packageId)
	return fs.combine(self:getPackageRootPath(packageId), packageId.version)
end
LocalDirectory.getAllVersions = function(self, packageId)
	local path = self:getPackageRootPath(packageId)
	if fs.isDir(path) then
		return fs.list(path)
	end
end
LocalDirectory.getLatestVersion = function(self, packageId)
	local versions = self:getAllVersions(packageId)
	if versions == nil then
		return
	end
	local latest
	for _, v in pairs(versions) do
		if latest == nil or version.new(latest):compareTo(version.new(v)) < 0 then
			latest = v
		end
	end
	return latest
end
local function loadFilesIn(path, encode)
	local files = fs.list(path)
	local fileData = {}
	for _, v in pairs(files) do
		local filePath = fs.combine(path, v)
		if fs.isDir(filePath) then
			fileData[v] = loadFilesIn(filePath, encode)
		else
			local file = fs.open(filePath, "r")
			fileData[v] = encode(file.readAll())
			file.close()
		end
	end
	return fileData
end
LocalDirectory.readPackage = function(self, packageId, encode)
	local path = self:getPackagePath(packageId)
	if fs.isDir(path) then
		return {id = packageId, contents = loadFilesIn(path, encode)}
	else
		return nil, "Unable to locate package path"
	end
end
LocalDirectory.bindPackageId = function(self, packageId)
	local version = packageId.version
	if version == nil then
		version = self:getLatestVersion(packageId)
	end
	if version == nil then
		return nil, "Unable to find latest version of package"
	end
	return {name = packageId.name, version = version}
end
LocalDirectory.bindPackage = function(self, packageId, encode)
	local package, errorMessage = self:bindPackageId(packageId)
	if package == nil then
		return nil, errorMessage
	end
	return self:readPackage(package, encode)
end

return LocalDirectory