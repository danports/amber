os.loadAPI("apis/events")
os.loadAPI("apis/net")
os.loadAPI("apis/dns")
os.loadAPI("apis/serializer")
os.loadAPI("apis/amber")

-- Bundle requests (legacy)
function sendPackages(args, sender)
	local packages = args[2]
	print(string.format("Sending %i packages to %i", #packages, sender))
	net.sendMessage(sender, "bundleDownload", amber.getBundle(packages))
end

-- Package requests
function downloadPackage(args, sender)
	local packageId = args[2]
	print(string.format("Sending package %s to %i", packageId.name, sender))
	net.sendMessage(sender, "packageDownload", amber.bindPackage(packageId))
end

-- Update broadcasting
function deployUpdate(toDeploy)
	if toDeploy == nil or toDeploy == "amber-server" then
		-- Deploy our own updates first.
		print("Installing Amber server update...")
		serializer.writeToFile("/state", {broadcastOnStartup = (toDeploy == nil), updateToDeploy = toDeploy})
		return amber.installBundle(amber.getBundle({{name = "amber-server"}}))
	else
		broadcastUpdate(toDeploy)
	end
end

function broadcastUpdate(toDeploy)
	local updating = "global"
	if toDeploy ~= nil then
		updating = toDeploy
	end
	print(string.format("Broadcasting availability of package update: %s", updating))
	-- TODO: rednet.broadcast, really??
	rednet.broadcast({"packageUpdateAvailable", toDeploy})
end

-- Startup
function readState()
	amber.initializeClient()

	local state = serializer.readFromFile("/state")
	if state.broadcastOnStartup then
		broadcastUpdate(state.updateToDeploy)
	end
	fs.delete("/state")
end

function onStartup()
	net.registerRawMessageHandler("sendPackages", sendPackages)
	net.registerRawMessageHandler("downloadPackage", downloadPackage)
	net.registerMessageHandler("deployUpdate", deployUpdate)

	print(string.format("Amber: Listening on %s...", net.openModem(config.modem)))
	dns.register("updates") -- TODO: Drop legacy protocol name.
	dns.register("amber")
	readState()
end

dofile("config")
onStartup()
events.runParallelMessageLoop()