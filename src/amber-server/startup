os.loadAPI("apis/log")
os.loadAPI("apis/events")
os.loadAPI("apis/net")
os.loadAPI("apis/dns")
os.loadAPI("apis/serializer")
os.loadAPI("apis/amber/amber")
os.loadAPI("apis/autoupdater")

-- Package requests
function downloadPackage(args, sender)
	local packageId = args[2]
	log.info(string.format("Received request for %s from %i...", amber.formatPackageId(packageId), sender))
	local package = client:bindPackage(packageId)
	if package == nil then
		local errorMessage = string.format("Unable to bind package %s", packageId.name)
		log.err(errorMessage)
		net.sendMessage(sender, "packageDownload", {errorMessage = errorMessage})
	else
		net.sendMessage(sender, "packageDownload", package)
		log.info(string.format("Sent %s to %i", amber.formatPackageId(package.id), sender))
	end
end

function sendAvailablePackages(args, sender)
	log.info(string.format("Sending available packages to %i...", sender))
	local packages = client:getAvailablePackages()
	net.sendMessage(sender, "availablePackages", packages)
end

-- Update broadcasting
function deployUpdate(toDeploy)
	log.info(string.format("Deploying package update: %s", toDeploy))
	local update = {
		packageUpdated = {name = toDeploy},
		bundle = client:getBundle({{name = toDeploy}}, nil)
	}
	-- TODO: rednet.broadcast - is that the best way to do this?
	rednet.broadcast(net.createMessage("bundleUpdateAvailable", update))
	-- Update our local installation, since we won't receive our own broadcast.
	autoupdater.processUpdateBundle(update)
end

-- Startup
function onStartup()
	client = amber.PackageClient.fromConfigurationPath()
	-- We override the autoupdater's default client, which would try to contact the server (us!).
	autoupdater.initialize({client = client})
	net.registerRawMessageHandler("downloadPackage", downloadPackage)
	net.registerRawMessageHandler("sendAvailablePackages", sendAvailablePackages)
	net.registerMessageHandler("deployUpdate", deployUpdate)

	dofile("config")
	log.info(string.format("Amber: Listening on %s...", net.openModem(config.modem)))
	dns.register("amber")
end

onStartup()
events.runParallelMessageLoop()