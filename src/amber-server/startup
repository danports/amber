os.loadAPI("apis/log")
os.loadAPI("apis/events")
os.loadAPI("apis/net")
os.loadAPI("apis/dns")
os.loadAPI("apis/serializer")
os.loadAPI("apis/amber/core")

-- Package requests
function downloadPackage(args, sender)
	local packageId = args[2]
	log.info(string.format("Received request for %s from %i...", amber.formatPackageId(packageId), sender))
	local package = client:bindPackage(packageId)
	if package == nil then
		local errorMessage = string.format("Unable to bind package %s", packageId.name)
		log.err(errorMessage)
		net.sendMessage(sender, "packageDownload", {errorMessage = errorMessage})
	else
		net.sendMessage(sender, "packageDownload", package)
		log.info(string.format("Sent %s to %i", amber.formatPackageId(package.id), sender))
	end
end

function sendAvailablePackages(args, sender)
	log.info(string.format("Sending available packages to %i...", sender))
	local packages = client:getAvailablePackages()
	net.sendMessage(sender, "availablePackages", packages)
end

-- Update broadcasting
function deployUpdate(toDeploy)
	if toDeploy == "amber-server" then
		-- TODO: Can we just use autoupdater here?
		log.info("Installing Amber server update...")
		local installation = amber.PackageInstallation.new(client, nil, nil, log.info)
		installation:installPackages({{name = "amber-server"}})
	else
		broadcastUpdate(toDeploy)
	end
end

function broadcastUpdate(toDeploy)
	log.info(string.format("Broadcasting availability of package update: %s", toDeploy))
	-- TODO: rednet.broadcast - is that the best way to do this?
	local bundle = client:getBundle({{name = toDeploy}}, nil)
	rednet.broadcast(net.createMessage("bundleUpdateAvailable", 
		{
			packageUpdated = {name = toDeploy},
			bundle = bundle
		}))
end

-- Startup
function onStartup()
	net.registerRawMessageHandler("downloadPackage", downloadPackage)
	net.registerRawMessageHandler("sendAvailablePackages", sendAvailablePackages)
	net.registerMessageHandler("deployUpdate", deployUpdate)

	dofile("config")
	log.info(string.format("Amber: Listening on %s...", net.openModem(config.modem)))
	dns.register("amber")
	client = amber.PackageClient.fromConfigurationPath()
end

onStartup()
events.runParallelMessageLoop()