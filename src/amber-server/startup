os.loadAPI("apis/log")
os.loadAPI("apis/events")
os.loadAPI("apis/net")
os.loadAPI("apis/dns")
os.loadAPI("apis/serializer")
os.loadAPI("apis/amber")

-- Bundle requests (TODO: This is legacy code.)
function sendPackages(args, sender)
	local packages = args[2]
	log.info(string.format("Sending %i packages to %i", #packages, sender))
	-- TODO: Use the old encoding only here.
	net.sendMessage(sender, "bundleDownload", client:getBundle(packages, true))
end

-- Package requests
function downloadPackage(args, sender)
	local packageId = args[2]
	log.info(string.format("Received request for %s from %i...", amber.formatPackageId(packageId), sender))
	local package = client:bindPackage(packageId)
	if package == nil then
		local errorMessage = string.format("Unable to bind package %s", packageId.name)
		log.err(errorMessage)
		net.sendMessage(sender, "packageDownload", {errorMessage = errorMessage})
	else
		net.sendMessage(sender, "packageDownload", package)
		log.info(string.format("Sent %s to %i", amber.formatPackageId(package.id), sender))
	end
end

function sendAvailablePackages(args, sender)
	log.info(string.format("Sending available packages to %i...", sender))
	local packages = client:getAvailablePackages()
	net.sendMessage(sender, "availablePackages", packages)
end

-- Update broadcasting
function deployUpdate(toDeploy)
	if toDeploy == nil or toDeploy == "amber-server" then
		-- Deploy our own updates first.
		log.info("Installing Amber server update...")
		serializer.writeToFile("/state", {broadcastOnStartup = (toDeploy == nil), updateToDeploy = toDeploy})
		local installation = amber.PackageInstallation.new(nil, nil, log.info)
		installation:installPackages(client, {{name = "amber-server"}})
	else
		broadcastUpdate(toDeploy)
	end
end

function broadcastUpdate(toDeploy)
	local updating = "global"
	if toDeploy ~= nil then
		updating = toDeploy
	end
	log.info(string.format("Broadcasting availability of package update: %s", updating))
	-- TODO: rednet.broadcast, really??
	rednet.broadcast({"packageUpdateAvailable", toDeploy})
end

-- Startup
function readState()
	client = amber.PackageClient.fromConfigurationPath()

	local state = serializer.readFromFile("/state")
	if state.broadcastOnStartup then
		broadcastUpdate(state.updateToDeploy)
	end
	fs.delete("/state")
end

function onStartup()
	net.registerRawMessageHandler("sendPackages", sendPackages)
	net.registerRawMessageHandler("downloadPackage", downloadPackage)
	net.registerRawMessageHandler("sendAvailablePackages", sendAvailablePackages)
	net.registerMessageHandler("deployUpdate", deployUpdate)

	log.info(string.format("Amber: Listening on %s...", net.openModem(config.modem)))
	dns.register("updates") -- TODO: Drop legacy protocol name.
	dns.register("amber")
	readState()
end

dofile("config")
onStartup()
events.runParallelMessageLoop()